global:
  features:
    draft: false
    exportPDF: false
  imagePullSecrets: []
  ingress:
    ingressClassName: ""
    annotations: {}
      # cert-manager annotations here
    hostname: ""
    port: 5000
    tls: true
  insight_api_key: ""
  keycloak:
    baseUrl: ""
    realm: ""
  mongodb:
    username: ""
    password: ""
    database: ""
    hostname: ""
    port: ""
  postgresql:
    username: "abcd"
    password: "efgh"
    database: "ijkl"
    hostname: "mnop"
    port: "1234"
  redis:
    host: ""
    port: ""

admin:
  image:
    registry: docker.io
    repository: formsflow/forms-flow-ai-admin
    tag: v5.2.0
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 250m
      memory: 512Mi
analytics:
  Domain: #<DEFINE_ME>

  database:
    username: postgres 
    password: postgres
    servicename: forms-flow-ai-postgresql-ha-pgpool
    port: 5432
    url: "postgresql://{{.Values.database.username}}:{{.Values.database.password}}@{{.Values.database.servicename}}:{{.Values.database.port}}/{{.Chart.Name}}"

  formsflow:
    auth: forms-flow-ai-auth
  ingress:
    ingressClassName: "" 
    annotations: 
    enabled: true # create an ingress for this component
    hostname: "{{.Chart.Name}}-{{.Release.Namespace}}.{{tpl .Values.Domain .}}"
    port: 5000
    tls: true
    selfSigned: false
    extraTls:
      - {}  
  redis-exporter:
    exporter:
      image:  
        registry: docker.io
        repository: oliver006/redis_exporter
        tag: v1.14.0-alpine
    redis:
      image:  
        registry: docker.io
        repository: redis
        tag: 7.0-rc3-alpine
    persistentVolumeClaim:
      size: 2Gi  
      storageClass: ""
    resources:
      limits:
        cpu: 60m
        memory: 512Mi
      requests:
        cpu: 50m
        memory: 256Mi
  redash:
    image:
      registry: docker.io #registry to use
      repository: formsflow/redash # repoisitory for redash image  
      tag: 10.1.5 # tag of image being used
    database:
      password: postgres # admin password
      url: "postgresql://postgres:postgres@forms-flow-analytics-postgresql:5432/postgres" # redash database url - i.e forms-flow-analytics-postgresql

  resources:
    limits:
      cpu: 200m
      memory: 2Gi
    requests:
      cpu: 180m
      memory: 1Gi
api:
  image:
    registry: docker.io
    repository: formsflow/forms-flow-webapi
    tag: v5.2.0
  resources:
    limits:
      cpu: 300m
      memory: 1Gi
    requests:
      cpu: 200m
      memory: 512Mi
bpm:
  camunda:
    analytics:
      database: forms-flow-analytics
    auth:
      enabled: true
      revokeCheck: auto
    logLevel: INFO
    formBuilder:
      password: demo
      username: demo
    hikari:
      timeout:
        connection: 30000
        idle: 600000
        valid: 5000
      poolsize:
        max: 10
    jdbc:
      driver: org.postgresql.Driver
      username: postgres
      password: postgres
      url: "jdbc:postgresql://${CAMUNDA_DATABASE_SERVICE_NAME}:${CAMUNDA_DATABASE_PORT}/${CAMUNDA_DATABASE_NAME}"
    websocket:
      messageType: TASK_EVENT
      securityOrigin:
    ## Seemingly unused settings:
    # historyLevel: auto
    # securityOrigin: '*'
  image:
    registry: docker.io
    repository: formsflow/forms-flow-bpm
    tag: v5.2.0
  mail:
    from: "<DEFINE_ME>"
    password: "<DEFINE_ME>"
    user: "<DEFINE_ME>"
    smtp:
      auth: true
      port: 5432
      server: "<DEFINE_ME>"
      ssl:
        enable: false
  oidc:
    clientID: "forms-flow-bpm"
    clientSecret: "786001d6-68a8-4519-903c-bc5b5a870d68"
  resources:
    limits:
      cpu: 600m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi

  waitFor: "${CAMUNDA_DATABASE_SERVICE_NAME}:${CAMUNDA_DATABASE_PORT}"
dataAnalysis:
  image:
    registry: docker.io
    repository: formsflow/forms-flow-data-analysis-api
    tag: v5.1.0
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 250m
      memory: 512Mi
docs:
  image:
    registry: docker.io
    repository: formsflow/forms-flow-documents-api
    tag: v5.2.0
  resources:
    limits:
      cpu: 200m
      memory: 1Gi
    requests:
      cpu: 100m
      memory: 512Mi
forms:
  formio:
    rootEemail: "me@defineme.com"
    rootPassword: "admin"
  image:
    registry: docker.io
    repository: formsflow/forms-flow-forms
    tag: v5.2.0
  resources:
    limits:
      cpu: 200m
      memory: 1Gi
    requests:
      cpu: 100m
      memory: 512Mi
web:
  config:
    base_custom_url: ""
    config_path: /usr/share/nginx/html/config/
    custom_theme_url: ""
    name: formsflow
    websocket_encrypt_key: "FormsFlow.AI"
  image:
    registry: docker.io
    repository: formsflow/forms-flow-web
    tag: v5.2.0
  oidc:
    clientID: "forms-flow-web"
    clientSecret: ""
  resources:
    limits:
      cpu: 200m
      memory: 1Gi
    requests:
      cpu: 100m
      memory: 512Mi

keycloak:
  enabled: false
  auth:
    adminUser: admin
  tls:
    enabled: true
    autoGenerated: true
  extraEnvVars: 
    - name: KEYCLOAK_ADMIN_USER
      value: admin
    - name: KEYCLOAK_EXTRA_ARGS
      value: "-Dkeycloak.import=/realm/realm.json" 
    - name: KEYCLOAK_PROXY_ADDRESS_FORWARDING
      value: "true"
    - name: JAVA_OPTS
      value: >-
        -Dkeycloak.profile.feature.scripts=enabled
        -Dkeycloak.profile.feature.upload_scripts=enabled
        -Djava.net.preferIPv4Stack=true
  extraVolumes: 
    - name: "forms-flow-idm-realm-config"
      configMap:
        name: "forms-flow-idm"
    - name: formsflow-themes
      emptyDir: {}
  extraVolumeMounts: 
    - name: "forms-flow-idm-realm-config"
      mountPath: "/realm/"
      readOnly: false
    - mountPath: /opt/bitnami/keycloak/themes
      name: formsflow-themes
      subPath: themes
  initContainers:
    - name: formsflow-themes
      image: formsflow/forms-flow-idm-theme
      imagePullPolicy: Always
      securityContext:
        runAsUser: 1001
      command: ["/bin/sh","-c"]
      args:
      - "mkdir /opt/bitnami/keycloak/themes && \
         cp -rf /my-theme/* /opt/bitnami/keycloak/themes && \
         ls -ltra /opt/bitnami/keycloak/themes"
      volumeMounts:
      - mountPath: /opt/bitnami/keycloak
        name: formsflow-themes
  image:
    registry: "docker.io"
    repository: "bitnami/keycloak" 
    tag: 14.0.0
 
  postgresql:
    enabled: false
  
  externalDatabase:
    host: "forms-flow-idm-postgresql-ha-pgpool"
    port: 5432
    user: postgres
    database: postgres
    password: "postgres"

  resources:
    limits:
      cpu: 700m
      memory: 3Gi
    requests:
      cpu: 500m
      memory: 2Gi
  
  containerSecurityContext:
    enabled: false
  podSecurityContext:
    enabled: false

  keycloakConfigCli:
    containerSecurityContext:
      enabled: false
    podSecurityContext:
      enabled: false
  
  service:
    type: ClusterIP
  ingress:
    ingressClassName: ""
    annotations:
  #    kubernetes.io/ingress.class: nginx
    extraTls:
      - {}
    enabled: true
    hostname: #DEFINE_ME
    pathtype: Prefix
    servicePort: http
    tls: true

  httpRelativePath: /auth/
  cache:
    enabled: false

mongodb:
  enabled: false
  image:
    tag: 4.2.21-debian-10-r8
  fullnameOverride: "forms-flow-ai-mongodb"
  clusterDomain: cluster.local
  architecture: replicaset
  useStatefulSet: true
  auth:
    databases: 
      - formsflow 
    passwords:
      - changeme    #use the same password in initdbscript
    usernames:
      - mongodb     #use the same username in initdbscript
    enabled: true
    rootUser: root
    rootPassword: "changeme"
    replicaSetKey: "formsflow"
  initdbScripts:
    init-mongo.js: |
          use admin
          db.createUser({
              user: 'mongodb',     
              pwd: 'changeme',   
              roles: [
                {
                  role: 'readWrite',
                  db: 'formsflow',
                },
              ],
          });
  replicaSetName: rs0
  replicaSetHostnames: true
  directoryPerDB: false
  replicaCount: 3
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  containerPorts:
    mongodb: 27017
  service:
    nameOverride: "forms-flow-ai-mongodb"
    type: ClusterIP
    portName: mongodb
    ports:
      mongodb: 27017
  persistence:
    enabled: true
    accessModes:
      - ReadWriteOnce
    size: 8Gi
    mountPath: /bitnami/mongodb
  serviceAccount:
    create: true
  
  arbiter:
    enabled: false
    podSecurityContext:
      enabled: false
      fsGroup: 1001
    containerSecurityContext:
      enabled: false
      runAsUser: 1001

postgresql-ha:
  enabled: false
  postgresql:
    image:
      registry: docker.io
      repository: bitnami/postgresql-repmgr
      tag: 15.1.0-debian-11-r0
    replicaCount: 3
    containerPorts:
      postgresql: 5432
    podSecurityContext:
      enabled: false
      fsGroup: 1001
    containerSecurityContext:
      enabled: false
      runAsUser: 1001
      runAsNonRoot: true
      readOnlyRootFilesystem: false

    livenessProbe:
      enabled: false
    readinessProbe:
      enabled: false
    username: postgres
    password: "postgres"
    database: "forms-flow-ai"
    postgresPassword: "changeme"

    repmgrUsername: repmgr
    repmgrPassword: "changeme"
    repmgrDatabase: repmgr
    repmgrLogLevel: NOTICE
    repmgrConnectTimeout: 5
    repmgrReconnectAttempts: 2
    repmgrReconnectInterval: 3
    repmgrFenceOldPrimary: false
    repmgrChildNodesCheckInterval: 5
    repmgrChildNodesConnectedMinCount: 1
    repmgrChildNodesDisconnectTimeout: 30
    initdbScripts:
      init_script.sql: |
            CREATE DATABASE "forms-flow-admin";
            CREATE DATABASE "forms-flow-analytics";
            CREATE DATABASE "forms-flow-api";
            CREATE DATABASE "forms-flow-bpm";
            GRANT ALL PRIVILEGES ON DATABASE "forms-flow-admin" to postgres;
            GRANT ALL PRIVILEGES ON DATABASE "forms-flow-analytics" to postgres;
            GRANT ALL PRIVILEGES ON DATABASE "forms-flow-api" to postgres;
            GRANT ALL PRIVILEGES ON DATABASE "forms-flow-bpm" to postgres;
            set transaction read write;
            alter database "forms-flow-bpm" set default_transaction_read_only = off;
            alter database "forms-flow-api" set default_transaction_read_only = off;
            alter database "forms-flow-analytics" set default_transaction_read_only = off;
            alter database "forms-flow-admin" set default_transaction_read_only = off;
  pgpool:
    image:
      registry: docker.io
      repository: bitnami/pgpool
      tag: 4.3.3-debian-11-r28
      digest: ""
      pullPolicy: IfNotPresent
    replicaCount: 1
    podSecurityContext:
      enabled: false
      fsGroup: 1001
    containerSecurityContext:
      enabled: false
      runAsUser: 1001
      runAsNonRoot: true
      readOnlyRootFilesystem: false
    livenessProbe:
      enabled: false
    readinessProbe:
      enabled: false
    containerPorts:
      postgresql: 5432
    adminUsername: admin
    adminPassword: "changeme"
    service:
      type: ClusterIP
      ports:
        metrics: 9187
  persistence:
    enabled: true
    storageClass: ""
    mountPath: /bitnami/postgresql
    accessModes:
      - ReadWriteOnce
    size: 8Gi
  service:
    type: ClusterIP
    ports:
      postgresql: 5432
    portName: postgresql
    nodePorts:
      postgresql: ""

redis:
  enabled: false
